# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

#Current state number
curState = 0

#Set horizontal scrollbar to end
$(window).resize ->
  $('.timeline_section').scrollLeft document.getElementById('timeline_container').scrollWidth
  return

#Display next state in timeline
$(document).ready ->
  $('#nextUSstate').click ->
    if curState < 50
      nextStateSlide()
      $('#prevUSstate').prop 'disabled', false      
    return
  return

#Go to previous state in timeline and remove current displayed state
$(document).ready ->
  $('#prevUSstate').click ->
    console.log "curState: " + curState
    if curState > 0
       prevStateSlide()
       if curState == 0
          $('#prevUSstate').prop 'disabled', true
          $('.map_image').attr 'src', $('.tc_first').data('map-image')
       return
    return
  return

#Changes map image, current state number and changes classes on state
nextStateSlide = ->
  first = $('.tb_state.not-visible').first()
  first.removeClass ' not-visible '
  first.addClass ' visible '
  first.toggle()
  curState++
  $('.timeline_section').animate { scrollLeft: '+=230' }, 100
  $('.map_image').attr 'src', $('#state_el_' + curState).data('map-image')
  return

#Changes map image, current state number and changes classes on state
prevStateSlide = ->
   last = $('.tb_state.visible').last()
   last.removeClass ' visible '
   last.addClass ' not-visible '
   last.toggle()
   curState--
   #$('.timeline_section').animate { scrollLeft: '-=230' }, 100
   $('.map_image').attr 'src', $('#state_el_' + curState).data('map-image')

#Variable for stopping interval
intervalHolder = undefined

#Goes through state timeline without user input
$(document).ready ->
  $('#playUSstate').click ->
    if curState < 50
      intervalHolder = setInterval(nextStateSlide, 1000)
      $('#playUSstate').prop 'disabled', true
      $('#prevUSstate').prop 'disabled', true
      $('#nextUSstate').prop 'disabled', true
      $('#stopUSstate').prop 'disabled', false
    return
  return
#Stops autoplay of state timeline
$(document).ready ->
  $('#stopUSstate').click ->
    clearInterval intervalHolder
    $('#playUSstate').prop 'disabled', false
    $('#prevUSstate').prop 'disabled', false
    $('#nextUSstate').prop 'disabled', false
    $('#stopUSstate').prop 'disabled', true
    return
  return
      
$(document).ready ->      
  $('.timeline_section').scroll ->
    if curState == 50 and $('#scrollquestion').get(0).scrollWidth - $('#scrollquestion').scrollLeft() == $('#scrollquestion').outerWidth()
      alert 'right end'
    return
  return

#Adds or removes states from timeline section
QuickState = (callback, repetitions) ->
  x = 0
  intervalID = window.setInterval((->
    callback()
    if ++x == repetitions
      window.clearInterval intervalID
    return
  ), 100)
  return

#Jump to the selected state when user selects state name from dropdown list
$(document).ready ->
  $('#ddl_states_name').change ->
    if $('#ddl_states_name').val() > curState
      nextDistance = $('#ddl_states_name').val() - curState
      QuickState nextStateSlide, nextDistance
      $('#prevUSstate').prop 'disabled', false
    else
      prevDistance = curState - $('#ddl_states_name').val()
      QuickState prevStateSlide, prevDistance
    return
  return
  #Jump to the selected state when user selects number from dropdown list
$(document).ready ->
  $('#ddl_states_num').change ->
    if $('#ddl_states_num').val() > curState
      nextDistance = $('#ddl_states_num').val() - curState
      QuickState nextStateSlide, nextDistance
      $('#prevUSstate').prop 'disabled', false
    else
      prevDistance = curState - $('#ddl_states_num').val()
      QuickState prevStateSlide, prevDistance
    return
  return

